#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/backlight.h>

#define DEFAULT 0
#define LWR 1
#define RSE 2
#define ADJ 3

/ {
    macros {
        l_tog: l_tog {
            label = "ZM_light_toggle";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_TOG &bl BL_TOG>
                ;
        };
	l_f: l_f {
            label = "ZM_light_forward";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_BRI &bl BL_INC>
                ;
        };
	l_r: l_r {
            label = "ZM_light_reverse";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &rgb_ug RGB_BRD &bl BL_DEC>
                ;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
             &kp ESC &kp N1 &kp N2 &kp N3 &kp N4 &kp N5 &kp MINUS        &kp EQUAL &kp N6 &kp N7 &kp N8 &kp N9 &kp N0 &kp DEL
             &kp TAB &kp Q &kp W &kp E &kp R &kp T &kp LBKT        &kp RBKT &kp Y &kp U &kp I &kp O &kp P &kp BSPC
             &kp CAPS &kp A &kp S &kp D &kp F &kp G &kp SEMI        &kp SQT &kp H &kp J &kp K &kp L &kp BSLH &kp RET
             &kp LSHFT &kp Z &kp X &kp C &kp V &kp B &kp COMMA        &kp DOT &kp B &kp N &kp M &kp FSLH &kp UP &kp RSHFT
             &kp LCTRL &kp LGUI &kp LALT &kp K_CMENU &mo LWR &kp SPACE &kp SPACE        &kp SPACE &kp SPACE &mo RSE &kp K_CMENU &kp LEFT &kp DOWN  &kp RIGHT
            >;
        };

        lower_layer {
            bindings = <
             &kp GRAVE &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6        &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12 &kp INS
             &out OUT_TOG &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR &trans &trans        &trans &trans &trans &trans &trans &trans &trans
             &bootloader &trans &trans &trans &trans &trans &reset        &trans &trans &trans &trans &trans &trans &trans
             &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
             &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
            >;
        };

        raise_layer {
            bindings = <
             &kp GRAVE &kp F1 &kp F2 &kp F3 &kp F4 &kp F5 &kp F6        &kp F7 &kp F8 &kp F9 &kp F10 &kp F11 &kp F12 &kp INS
             &trans &trans &trans &trans &trans &trans &trans        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR &trans &trans &out OUT_TOG
             &trans &trans &trans &trans &trans &trans &trans        &reset &trans &trans &trans &trans &trans &bootloader
             &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
             &trans &trans &trans &trans &trans &trans &trans        &trans &trans &trans &trans &trans &trans &trans
             >;
        };

        adjust_layer {
            bindings = <
            &out OUT_TOG &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR &none &none        &none &none &none &none &none &none &none
            &l_tog &l_r &l_f &rgb_ug RGB_EFR &rgb_ug RGB_EFF &none &none        &none &none &none &none &none &none &none
            &none &rgb_ug RGB_SAD &rgb_ug RGB_SAI &rgb_ug RGB_HUD &rgb_ug RGB_HUI &none &none        &none &none &none &none &none &none &none
            &none &none &none &none &none &none &none        &none &none &none &none &none &none &none
            &none &none &none &none &none &none &none        &none &none &none &none &none &none &none
            >;
        };
    };
};

/ {
   conditional_layers {
       compatible = "zmk,conditional-layers";
       tri_layer {
           if-layers = <LWR RSE>;
           then-layer = <ADJ>;
       };
   };
}; 
